# -*- coding: utf-8 -*-
"""Radar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_WGDnUwrqw3MLC0S4J-BRU-X0ncg1Wcy

# Radar Chart
"""

import matplotlib.pyplot as plt
import pandas as pd
from math import pi
from google.colab import drive
drive.mount('/content/gdrive')
pathconf = '/content/gdrive/My Drive/Visualization/parameter.conf'
path = '/content/gdrive/My Drive/Visualization/Data/'
path_img = '/content/gdrive/My Drive/Visualization/Images/'

# loading and preparing data
df = pd.DataFrame({
'group': ['A','B','C','D'],
'var1': [38, 10.5, 30, 22],
'var2': [29, 10, 9, 34],
'var3': [15, 39, 23, 24],
'var4': [7, 31, 33, 14],
'var5': [28, 15, 32, 14]})

# color labels setting 
color = ["grey"]
 
# part1: create background
# number of variables
categories=list(df)[1:]
N = len(categories)
 
# dividing the plot / number of variable
angles = [n / float(N) * 2 * pi for n in range(N)]
angles += angles[:1]
 
# initialise the spider plot
ax = plt.subplot(111, polar=True)
 
# if you want the first axis to be on top:
ax.set_theta_offset(pi / 2)
ax.set_theta_direction(-1)
 
# drawing one axe per variable and add labels labels yet
plt.xticks(angles[:-1], categories)
 
# drawing ylabels
ax.set_rlabel_position(0)
plt.yticks([10,20,30], ["10","20","30"], color=color[0], size=7)
plt.ylim(0,40)
 
# part2: add plots
# plot each individual = each line of the data
# ind1
values=df.loc[0].drop('group').values.flatten().tolist()
values += values[:1]
ax.plot(angles, values, linewidth=1, linestyle='solid', label="group A")
ax.fill(angles, values, 'b', alpha=0.1)
 
# ind2
values=df.loc[1].drop('group').values.flatten().tolist()
values += values[:1]
ax.plot(angles, values, linewidth=1, linestyle='solid', label="group B")
ax.fill(angles, values, 'r', alpha=0.1)

# title and size
ax.set_title('Title',fontsize=16,pad = 18)
 
# legend
plt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))

# save image as pdf to path folder
# bbox in inches, only the given portion of the figure is saved, figure out the tight bbox of the figure
plt.savefig(path_img+'radar.pdf', bbox_inches='tight')
# show the image
plt.show()

