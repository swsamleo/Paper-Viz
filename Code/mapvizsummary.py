# -*- coding: utf-8 -*-
"""MapVizSummary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q4btrm1jniW2StOZIMTcI6JrANnnPtuS

# Setting up
"""

# mount the drive
from google.colab import drive
drive.mount('/content/gdrive')

# import libraries
import pandas as pd
import folium
from folium.plugins import HeatMap
import os

path = '/content/gdrive/My Drive/MP_Parking_Site/Data Finding/Vicroad_source_data/'
path_data = '/content/gdrive/My Drive/Viz_Project/data/'
output = '/content/gdrive/My Drive/Viz_Project/results'

# use MP traffic crash data as sampple data
sample_df = pd.read_csv(path+'Crashes_Last_Five_Years.csv')
sample_df.head()

print(sample_df['TOTAL_PERSONS'].max(), sample_df['TOTAL_PERSONS'].min())
print(sample_df['TOTAL_PERSONS'].unique())

dfBaySensors = pd.read_csv(
    '/content/gdrive/My Drive/Carpark_research/data/' + "On-street_Parking_Bay_Sensors.csv"
)
dfBaySensors.head()

def df_to_list(path_df, col_latitude, col_longitude):
  """
  A convient function to transform dataframe of locations into list of lists for the path map;
  path_df: a dataframe contains the locations
  col_latitude: column name of latitude
  col_longitude: column name of longitude
  """
   
  location_list =[] 
  # iterate over the rows
  for _, rows in path_df[[col_latitude, col_longitude]].iterrows(): 
    temp_list =[rows[col_latitude], rows[col_longitude]] 
      
    # append the list to the final list 
    location_list.append(temp_list) 
  return location_list

park_location = df_to_list(dfBaySensors, 'lat', 'lon')

park_location[:5]

"""# Heatmap

### Documentation of parameters in HeatMap()
* data (list of points of the form [lat, lng] or [lat, lng, weight]) 
 – The points you want to plot. You can also provide a numpy.array of shape (n,2) or (n,3).

* name (string, default None) – The name of the Layer, as it will appear in LayerControls.

* min_opacity (default 1.) – The minimum opacity the heat will start at.

* max_zoom (default 18) – Zoom level where the points reach maximum intensity 
 (as intensity scales with zoom), equals maxZoom of the map by default

* max_val (float, default 1.) – Maximum point intensity

* radius (int, default 25) – Radius of each “point” of the heatmap

* blur (int, default 15) – Amount of blur

* gradient (dict, default None) – Color gradient config. e.g. {0.4: ‘blue’, 0.65: ‘lime’, 1: ‘red’}

* overlay (bool, default True) – Adds the layer as an optional overlay (True) or the base layer (False).

* control (bool, default True) – Whether the Layer will be included in LayerControls.

* show (bool, default True) – Whether the layer will be shown on opening (only for overlays).
"""

# the library for the legend
import branca.colormap as bcm 

# create self-defined colour map
steps = 20
color_map = bcm.linear.Spectral_11.scale(0, 1).to_step(steps)

gradient_map={}
for i in range(steps):
    gradient_map[1/steps*i] = color_map.rgb_hex_str(1/steps*i)

# create a nested list for heatmap raw data storage: numpy.array of shape(n,3)
heat_list = [[row['Y'],row['X'],row['TOTAL_PERSONS']] for index, row in sample_df[(sample_df['LGA_NAME_ALL'].str.contains("MORNINGTON"))].iterrows()]

# create a base map for heatmap
# The default tiles are set to OpenStreetMap, but Stamen Terrain, Stamen Toner, cartodbpositron, Mapbox Bright, and Mapbox Control Room, and many others are built in
base_heat_map= folium.Map(location=[-38.3002,145.0827],tiles='cartodbpositron',zoom_start=11)

# create the heatmap
HeatMap(heat_list, name=None, min_opacity=0.5, max_zoom=18, max_val=1.0, radius=15, blur=15, gradient=gradient_map, overlay=True, control=True, show=True).add_to(base_heat_map)

base_heat_map.add_child(color_map)
# save the map to html.files
base_heat_map.save('heatmap.html')

base_heat_map

# create a base map for heatmap
# The default tiles are set to OpenStreetMap, but Stamen Terrain, Stamen Toner, cartodbpositron, Mapbox Bright, and Mapbox Control Room, and many others are built in
base_heat_map= folium.Map(location=[-37.8210, 144.94689],tiles='cartodbpositron',zoom_start=14)

# create the heatmap
HeatMap(park_location, name=None, min_opacity=0.5, max_zoom=18, max_val=1.0, radius=15, blur=15, gradient=gradient_map, overlay=True, control=True, show=True).add_to(base_heat_map)

base_heat_map.add_child(color_map)
# save the map to html.files
base_heat_map.save('heatmap.html')

base_heat_map

"""### Helper functions

## Path map
To show a polyline in the map with a provided **list** of location **[latitude, longitude]**.<br>
Parameters:<br>
* weight: the width of the line
* color: the color of the line
* opacity
* popup=None
* tooltip=None
"""

from folium import plugins
mp_list = df_to_list(sample_df[:20], 'Y', 'X')

park_path_map = folium.Map(location=[-37.8210, 144.94689],tiles='cartodbpositron',zoom_start=14) #  -38.3002,145.0827
# def ployline_map(location_list, )


folium.PolyLine(sorted(park_location[:5]), weight=5, color='red', popup=None, tooltip=None, opacity=0.4).add_to(park_path_map)
folium.PolyLine(park_location[:50], weight=2, color='green', popup=None, tooltip=None, opacity=0.8).add_to(park_path_map)
folium.PolyLine(sorted(park_location[10:16]), weight=5, color='blue', popup=None, tooltip=None, opacity=0.4).add_to(park_path_map)

# icon: 'ok-sign', 'remove-sign' 
folium.Marker(
    location=park_location[0],
    popup='Add popup text here.',
    icon=folium.Icon(color='green', icon=None),
).add_to(park_path_map)

folium.Marker(
    location=park_location[1],
    popup='Add popup text here.',
    icon=folium.Icon(color='green', icon='ok-sign'),
).add_to(park_path_map)

park_path_map

from folium import plugins
mp_list = df_to_list(sample_df[:20], 'Y', 'X')

base_path_map = folium.Map(location=[-38.3002,145.0827],tiles='cartodbpositron',zoom_start=11) #  -38.3002,145.0827
# def ployline_map(location_list, )


folium.PolyLine(sorted(heat_list[:5]), weight=5, color='red', popup=None, tooltip=None, opacity=0.4).add_to(base_path_map)

folium.PolyLine(sorted(heat_list[10:16]), weight=5, color='blue', popup=None, tooltip=None, opacity=0.4).add_to(base_path_map)

# icon: 'ok-sign', 'remove-sign' 
folium.Marker(
    location=heat_list[0],
    popup='Add popup text here.',
    icon=folium.Icon(color='green', icon=None),
).add_to(base_path_map)

folium.Marker(
    location=heat_list[1],
    popup='Add popup text here.',
    icon=folium.Icon(color='green', icon='ok-sign'),
).add_to(base_path_map)
# folium.Marker(
#     location=[-37.81379749, 144.96995745],
#     popup='Add popup text here.',
#     icon=folium.Icon(color='green', icon='ok-sign'),
# ).add_to(m)

# # to add the legend
# template = """
# {% macro html(this, kwargs) %}

# <!doctype html>
# <html lang="en">
# <head>
#   <meta charset="utf-8">
#   <meta name="viewport" content="width=device-width, initial-scale=1">
#   <title>jQuery UI Draggable - Default functionality</title>
#   <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

#   <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
#   <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
  
#   <script>
#   $( function() {
#     $( "#maplegend" ).draggable({
#                     start: function (event, ui) {
#                         $(this).css({
#                             right: "auto",
#                             top: "auto",
#                             bottom: "auto"
#                         });
#                     }
#                 });
# });

#   </script>
# </head>
# <body>

 
# <div id='maplegend' class='maplegend' 
#     style='position: absolute; z-index:9999; border:2px solid grey; background-color:rgba(255, 255, 255, 0.8);
#      border-radius:6px; padding: 10px; font-size:14px; right: 20px; bottom: 20px;'>

 
# <div class='legend-title'>Legend (draggable!)</div>
# <div class='legend-scale'>
#   <ul class='legend-labels'>
#     <li><span style='background:red;opacity:0.4;'></span>red line</li>
#     <li><span style='background:blue;opacity:0.4;'></span>blue line</li>
   

#   </ul>
# </div>
# </div>
 
# </body>
# </html>

# <style type='text/css'>
#   .maplegend .legend-title {
#     text-align: left;
#     margin-bottom: 5px;
#     font-weight: bold;
#     font-size: 90%;
#     }
#   .maplegend .legend-scale ul {
#     margin: 0;
#     margin-bottom: 5px;
#     padding: 0;
#     float: left;
#     list-style: none;
#     }
#   .maplegend .legend-scale ul li {
#     font-size: 80%;
#     list-style: none;
#     margin-left: 0;
#     line-height: 18px;
#     margin-bottom: 2px;
#     }
#   .maplegend ul.legend-labels li span {
#     display: block;
#     float: left;
#     height: 16px;
#     width: 30px;
#     margin-right: 5px;
#     margin-left: 0;
#     border: 1px solid #999;
#     }
#   .maplegend .legend-source {
#     font-size: 80%;
#     color: #777;
#     clear: both;
#     }
#   .maplegend a {
#     color: #777;
#     }
# </style>
# {% endmacro %}"""

# # add the legend
# macro = MacroElement()
# macro._template = Template(template)

# base_path_map.get_root().add_child(macro)

# base_heat_map.save(output+'path_map_with_marker.html')

base_path_map

# to add the legend
template = """
{% macro html(this, kwargs) %}

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>jQuery UI Draggable - Default functionality</title>
  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

  <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
  
  <script>
  $( function() {
    $( "#maplegend" ).draggable({
                    start: function (event, ui) {
                        $(this).css({
                            right: "auto",
                            top: "auto",
                            bottom: "auto"
                        });
                    }
                });
});

  </script>
</head>
<body>

 
<div id='maplegend' class='maplegend' 
    style='position: absolute; z-index:9999; border:2px solid grey; background-color:rgba(255, 255, 255, 0.8);
     border-radius:6px; padding: 10px; font-size:14px; right: 20px; bottom: 20px;'>

 
<div class='legend-title'>Legend (draggable!)</div>
<div class='legend-scale'>
  <ul class='legend-labels'>
    <li><span style='background:red;opacity:0.4;'></span>red line</li>
    <li><span style='background:blue;opacity:0.4;'></span>blue line</li>
   

  </ul>
</div>
</div>
 
</body>
</html>

<style type='text/css'>
  .maplegend .legend-title {
    text-align: left;
    margin-bottom: 5px;
    font-weight: bold;
    font-size: 90%;
    }
  .maplegend .legend-scale ul {
    margin: 0;
    margin-bottom: 5px;
    padding: 0;
    float: left;
    list-style: none;
    }
  .maplegend .legend-scale ul li {
    font-size: 80%;
    list-style: none;
    margin-left: 0;
    line-height: 18px;
    margin-bottom: 2px;
    }
  .maplegend ul.legend-labels li span {
    display: block;
    float: left;
    height: 16px;
    width: 30px;
    margin-right: 5px;
    margin-left: 0;
    border: 1px solid #999;
    }
  .maplegend .legend-source {
    font-size: 80%;
    color: #777;
    clear: both;
    }
  .maplegend a {
    color: #777;
    }
</style>
{% endmacro %}"""

# add the legend
macro = MacroElement()
macro._template = Template(template)

base_path_map.get_root().add_child(macro)

base_heat_map.save(output+'path_map_with_marker.html')

base_path_map

"""## Choropleth maps"""

import branca
import json
import requests

url = 'https://raw.githubusercontent.com/python-visualization/folium/master/examples/data'
county_data = f'{url}/us_county_data.csv'
county_geo = f'{url}/us_counties_20m_topo.json'


df = pd.read_csv(county_data, na_values=[' '])

colorscale = branca.colormap.linear.YlOrRd_09.scale(0, 50e3)
employed_series = df.set_index('FIPS_Code')['Employed_2011']


def style_function(feature):
    employed = employed_series.get(int(feature['id'][-5:]), None)
    return {
        'fillOpacity': 0.5,
        'weight': 0,
        'fillColor': '#black' if employed is None else colorscale(employed)
    }


m = folium.Map(
    location=[48, -102],
    tiles='cartodbpositron',
    zoom_start=3
)

folium.TopoJson(
    json.loads(requests.get(county_geo).text),
    'objects.us_counties_20m',
    style_function=style_function
).add_to(m)


m

# Load the shape of the zone (US states)
# Find the original file here: https://github.com/python-visualization/folium/tree/master/examples/data
# You have to download this file and set the directory where you saved it
state_geo = os.path.join(path_data, 'us-states.json')
 
# Load the unemployment value of each state
# Find the original file here: https://github.com/python-visualization/folium/tree/master/examples/data
#state_unemployment = os.path.join('/Users/y.holtz/Desktop/', 'US_Unemployment_Oct2012.csv')

state_data = pd.read_csv(path_data+'US_Unemployment_Oct2012.csv')
 
# Initialize the map:
m = folium.Map(location=[37, -102], zoom_start=5)
 
# Add the color for the chloropleth:
m.choropleth(
 geo_data=state_geo,
 name='choropleth',
 data=state_data,
 columns=['State', 'Unemployment'],
 key_on='feature.id',
 fill_color='YlGn',
 fill_opacity=0.7,
 line_opacity=0.2,
 legend_name='Unemployment Rate (%)'
)
folium.LayerControl().add_to(m)

m 
# Save to html
#m.save('#292_folium_chloropleth_USA1.html')

"""## Choropleth map with Geopandas"""

!pip install geopandas

import geopandas
import matplotlib as plt
import matplotlib.pyplot as plt

from mpl_toolkits.axes_grid1 import make_axes_locatable
world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))

# setting plot size
plt.figure(figsize=(16,12), dpi= 100)

fig, ax = plt.subplots(1, 1)

divider = make_axes_locatable(ax)

cax = divider.append_axes("right", size="5%", pad=0.1)

world.plot(column='pop_est', ax=ax, legend=True, cax=cax)

