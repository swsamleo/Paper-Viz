# -*- coding: utf-8 -*-
"""Line.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rUVpOGTMp6C_4p4qx5uIfPAxiB-zAQXD
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from decimal import Decimal
from matplotlib.ticker import MultipleLocator, FormatStrFormatter, AutoMinorLocator, FuncFormatter
import configparser
from google.colab import drive
drive.mount('/content/gdrive')
pathconf = '/content/gdrive/My Drive/Visualization/parameter.conf'
path = '/content/gdrive/My Drive/Visualization/Data/'
path_img = '/content/gdrive/My Drive/Visualization/Images/'

# loading and preparing data
cf = configparser.ConfigParser()
cf.read(pathconf)
df = pd.DataFrame({'X' :[10,20,30,40,50],
                   'Y1':[0.98,0.88,0.84,0.82,0.8],
                   'Y2':[0.88,0.78,0.66,0.62,0.58],
                   'Y3':[0.85,0.80,0.75,0.71,0.68],
                   'Y4':[0.80,0.68,0.60,0.55,0.50],
                   'Y5':[0.78,0.57,0.52,0.47,0.44],
                   'Y6':[0.75,0.52,0.50,0.45,0.42]})

# marker labels setting 
marker = ['o','v','D','X','P']
# linestyle labels setting 
linestyle = ['-',':','-.','--','-']
# color labels setting 
color = ['goldenrod']

# font setting 
font = {'fontsize': cf['font']['fontsize'],
        'fontweight' : cf['font']['fontweight'],
        'family' : cf['font']['family'],
        'verticalalignment' : cf['font']['verticalalignment'],
        'horizontalalignment' : cf['font']['horizontalalignment']
       }

# allow multiple graphing
FigSize = tuple([float(i) for i in cf['DEFAULT']['figsize'][1:-1].split(",")])
LineWidth = float(cf['DEFAULT']['linewidth'])

# plot size setting 
fig, ax = plt.subplots(figsize=(10,6))

# drawing plot
plt.plot('X', 'Y1', data=df, marker=marker[0], markersize=8, linestyle=linestyle[0], linewidth=LineWidth)
plt.plot('X', 'Y2', data=df, marker=marker[1], markersize=8, linestyle=linestyle[1], linewidth=LineWidth)
plt.plot('X', 'Y3', data=df, marker=marker[2], markersize=6, linestyle=linestyle[2], linewidth=LineWidth)
plt.plot('X', 'Y4', data=df, marker=marker[3], markersize=8, linestyle=linestyle[3], linewidth=LineWidth)
plt.plot('X', 'Y5', data=df, marker=marker[4], markersize=8, linestyle=linestyle[4], linewidth=LineWidth, color=color[0])

# title and position
ax.set_title('Title', font, loc=cf['title']['location'],pad=cf['title']['pad'])

# x,y label and size
# labelpad: Spacing in points between the label and the x-axis.
plt.xlabel('X_label', fontdict=font, labelpad=float(cf['label']['labelpad']))
plt.ylabel('Y_label', fontdict=font, labelpad=float(cf['label']['labelpad']))

# avoid overlap of major and minor tick label
def x_minor_tick(x,pos):
    if not x % 5.0:
        return ""
    return "%d" % x

def y_minor_tick(x,pos):
    if not Decimal(str(round(x,2))) % Decimal('0.1'): # deal with modulus for float number
        return ""
    return "%.2f" % x

# major and minor ticks for x axis
majorLocator = MultipleLocator(5)
majorFormatter = FormatStrFormatter('%d')
minorLocator = MultipleLocator(1)
ax.xaxis.set_major_locator(majorLocator)
ax.xaxis.set_major_formatter(majorFormatter)
ax.xaxis.set_minor_locator(minorLocator) # for the minor ticks, use no labels; default NullFormatter
ax.xaxis.set_minor_formatter(FuncFormatter(x_minor_tick))

# major and minor ticks for y axis
majorLocator = MultipleLocator(0.1)
majorFormatter = FormatStrFormatter('%.2f')
minorLocator = MultipleLocator(0.05)
ax.yaxis.set_major_locator(majorLocator)
ax.yaxis.set_minor_locator(minorLocator)
ax.yaxis.set_major_formatter(majorFormatter)
ax.yaxis.set_minor_formatter(FuncFormatter(y_minor_tick))
ax.tick_params(axis='both', which='major', labelsize=float(cf['ticks']['major_labelsize']), pad = float(cf['ticks']['major_pad']))
ax.tick_params(axis='both', which='minor', labelsize=float(cf['ticks']['minor_labelsize']), pad = float(cf['ticks']['minor_pad']))

# presenting values on graph
for x,y in zip(df['X'].values.tolist(),df['Y5'].values.tolist()):
    plt.text(x, y+0.01, str(round(y,2)), color = cf['DEFAULT']['fontcolor'])

# top and right borders removing 
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# background grid setting 
ax.xaxis.grid(color =cf['grid']['color'], linewidth=float(cf['grid']['linewidth']), alpha=float(cf['grid']['alpha'])) # alpha: soft color
ax.yaxis.grid(color =cf['grid']['color'], linewidth=float(cf['grid']['linewidth']), alpha=float(cf['grid']['alpha'])) # alpha: soft color

# legend
plt.legend(ncol=int(cf['legend']['ncol']), loc=cf['legend']['location'])

# save image as pdf to path folder
# bbox in inches, only the given portion of the figure is saved, figure out the tight bbox of the figure
plt.savefig(path_img+'line.jpg', bbox_inches='tight')
# showing the image
plt.show()

